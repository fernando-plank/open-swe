name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  YARN_CACHE_FOLDER: ~/.yarn

jobs:
  # Job to detect changes and set up matrix
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      agent: ${{ steps.changes.outputs.agent }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/shared/**'
              - 'package.json'
              - 'yarn.lock'
              - 'turbo.json'
            agent:
              - 'apps/open-swe/**'
              - 'packages/shared/**'
              - 'package.json'
              - 'yarn.lock'
              - 'turbo.json'
            shared:
              - 'packages/shared/**'

  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true' || needs.changes.outputs.agent == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint code
        run: yarn lint

      - name: Run tests
        run: yarn test

      - name: Build packages
        run: yarn build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            apps/open-swe/dist
            packages/shared/dist
            .turbo
          key: build-${{ github.sha }}
          restore-keys: |
            build-${{ github.ref_name }}-

  # Deploy web app to Vercel
  deploy-web:
    runs-on: ubuntu-latest
    needs: [changes, build-and-test]
    if: needs.changes.outputs.web == 'true' && (github.ref == 'refs/heads/main' || github.event.pull_request.merged == true)
    environment:
      name: production-web
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            packages/shared/dist
            .turbo
          key: build-${{ github.sha }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build web app
        run: yarn deploy:web

      - name: Deploy to Vercel
        id: deploy
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
        env:
          # GitHub App Secrets
          NEXT_PUBLIC_GITHUB_APP_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GITHUB_APP_CLIENT_ID }}
          GITHUB_APP_CLIENT_SECRET: ${{ secrets.GITHUB_APP_CLIENT_SECRET }}
          GITHUB_APP_REDIRECT_URI: ${{ secrets.GITHUB_APP_REDIRECT_URI }}
          GITHUB_APP_NAME: ${{ secrets.GITHUB_APP_NAME }}
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
          # API URLs
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          LANGGRAPH_API_URL: ${{ secrets.LANGGRAPH_API_URL }}
          # Security
          SECRETS_ENCRYPTION_KEY: ${{ secrets.SECRETS_ENCRYPTION_KEY }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Web app deployed to: ${{ steps.deploy.outputs.url }}`
            })

  # Deploy agent to Render
  deploy-agent:
    runs-on: ubuntu-latest
    needs: [changes, build-and-test]
    if: needs.changes.outputs.agent == 'true' && (github.ref == 'refs/heads/main' || github.event.pull_request.merged == true)
    environment:
      name: production-agent
      url: ${{ secrets.RENDER_SERVICE_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/open-swe/dist
            packages/shared/dist
            .turbo
          key: build-${{ github.sha }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build agent app
        run: yarn deploy:agent

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Comment deployment status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ü§ñ Agent deployed to Render: ${{ secrets.RENDER_SERVICE_URL }}`
            })

  # Notify deployment completion
  notify-completion:
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-agent]
    if: always() && (needs.deploy-web.result == 'success' || needs.deploy-agent.result == 'success')
    steps:
      - name: Notify successful deployment
        uses: actions/github-script@v7
        with:
          script: |
            const webStatus = '${{ needs.deploy-web.result }}';
            const agentStatus = '${{ needs.deploy-agent.result }}';
            
            let message = '‚úÖ Deployment completed!\n\n';
            
            if (webStatus === 'success') {
              message += 'üåê Web app: Successfully deployed to Vercel\n';
            }
            
            if (agentStatus === 'success') {
              message += 'ü§ñ Agent: Successfully deployed to Render\n';
            }
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
